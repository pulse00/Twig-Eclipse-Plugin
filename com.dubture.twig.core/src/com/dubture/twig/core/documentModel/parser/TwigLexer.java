/*******************************************************************************
 * This file is part of the Twig eclipse plugin.
 *
 * (c) Robert Gruendler <r.gruendler@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 ******************************************************************************/
/* The following code was generated by JFlex 1.4.1 on 1/10/12 12:40 AM */

/********************************************************************************
 * Copyright (c) 2012 Zend Corporation and IBM Corporation.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Zend and IBM - Initial implementation
 *   Robert Gruendler <r.gruendler@gmail.com> - Twig additions
 ********************************************************************************/

package com.dubture.twig.core.documentModel.parser;

import org.eclipse.php.internal.core.util.collections.IntHashtable;
import org.eclipse.wst.sse.core.utils.StringUtils;
import com.dubture.twig.core.util.Debug;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/10/12 12:40 AM from the specification file
 * <tt>highlighting_scanner.jflex</tt>
 */
@SuppressWarnings("restriction")
public class TwigLexer extends com.dubture.twig.core.documentModel.parser.AbstractTwigLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_TWIG_HIGHLIGHTING_ERROR = 6;
  public static final int ST_TWIG_INTERPOLATION = 9;
  public static final int ST_TWIG_IN_PRINT = 1;
  public static final int ST_TWIG_DOUBLE_QUOTES = 4;
  public static final int ST_TWIG_COMMENT = 7;
  public static final int ST_TWIG_IN_STATEMENT_BODY = 3;
  public static final int YYINITIAL = 0;
  public static final int ST_TWIG_SINGLE_QUOTES = 5;
  public static final int ST_TWIG_HASH = 8;
  public static final int ST_TWIG_IN_STATEMENT = 2;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\24\1\32\2\0\1\24\22\0\1\24\1\25\1\22\1\27"+
    "\1\25\1\31\1\25\1\33\5\25\1\26\2\25\12\2\1\25\1\0"+
    "\5\25\1\7\1\34\1\1\1\11\1\12\1\13\1\1\1\15\1\6"+
    "\2\1\1\17\1\1\1\3\1\4\2\1\1\16\1\10\1\5\2\1"+
    "\1\14\1\1\1\20\1\1\1\25\1\23\2\25\1\1\1\0\1\7"+
    "\1\34\1\1\1\11\1\12\1\13\1\1\1\15\1\6\2\1\1\17"+
    "\1\1\1\3\1\4\2\1\1\16\1\10\1\5\2\1\1\14\1\1"+
    "\1\20\1\1\1\21\1\25\1\30\1\25\201\1\uff00\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\1\3\6\2\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\2\7\11\1\1\1\12\1\1"+
    "\1\0\1\1\1\13\1\1\1\14\2\1\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\2\2\1\24\3\2"+
    "\2\0\1\25\2\0\1\26\2\0\1\27\1\10\2\11"+
    "\1\24\3\11\1\30\1\31\2\0\1\32\1\33\3\2"+
    "\3\11\1\2\1\11\1\2\1\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\0\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196"+
    "\0\u01b3\0\u01d0\0\u01ed\0\0\0\u020a\0\u0227\0\0\0\u0244"+
    "\0\u0261\0\u027e\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c"+
    "\0\u0349\0\u0366\0\0\0\u0383\0\u0366\0\u03a0\0\u03bd\0\u03bd"+
    "\0\0\0\u03da\0\u03f7\0\u0414\0\0\0\0\0\u0431\0\0"+
    "\0\u044e\0\0\0\u046b\0\u0488\0\u04a5\0\u0122\0\u04c2\0\u04df"+
    "\0\u04fc\0\u020a\0\u0519\0\0\0\u0536\0\u0553\0\u0570\0\u0261"+
    "\0\u058d\0\0\0\0\0\u05aa\0\u05c7\0\u029b\0\u05e4\0\u0601"+
    "\0\u061e\0\u063b\0\u0658\0\u03bd\0\u03da\0\0\0\u0675\0\u0692"+
    "\0\u06af\0\u06cc\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a"+
    "\0\u0797";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\35\0\1\13\1\14\1\15\1\16\1\17\1\14\1\20"+
    "\1\21\1\14\1\22\2\14\1\23\4\14\1\24\1\25"+
    "\1\13\1\26\2\27\1\13\1\30\1\13\1\26\1\31"+
    "\1\32\1\13\1\33\1\13\1\34\1\35\1\33\1\36"+
    "\1\37\1\33\1\40\2\33\1\41\4\33\3\13\1\42"+
    "\1\13\1\43\2\13\1\44\1\45\1\13\1\33\1\13"+
    "\1\14\1\15\1\16\1\17\1\14\1\20\1\21\1\14"+
    "\1\22\2\14\1\23\4\14\1\24\1\25\1\13\1\26"+
    "\2\27\2\13\1\46\1\26\1\31\1\32\21\47\1\50"+
    "\1\51\1\52\3\47\1\53\5\47\33\54\1\55\1\54"+
    "\24\56\1\57\5\56\1\57\2\56\27\60\1\61\5\60"+
    "\1\13\1\14\1\15\1\16\1\17\1\14\1\20\1\21"+
    "\1\14\1\22\2\14\1\23\4\14\1\24\1\25\1\13"+
    "\1\26\1\27\1\43\1\13\1\62\1\13\1\26\1\31"+
    "\1\32\1\13\1\14\1\15\1\16\1\17\1\14\1\20"+
    "\1\21\1\14\1\22\2\14\1\23\4\14\3\13\1\26"+
    "\2\27\1\13\1\63\1\13\1\26\1\13\1\14\1\0"+
    "\20\14\13\0\1\14\2\0\1\15\33\0\3\14\1\64"+
    "\14\14\13\0\1\14\1\0\2\14\1\65\12\14\1\66"+
    "\2\14\13\0\1\14\1\0\2\14\1\66\4\14\1\66"+
    "\10\14\13\0\1\14\1\0\2\14\1\67\4\14\1\66"+
    "\10\14\13\0\1\14\1\0\11\14\1\70\6\14\13\0"+
    "\1\14\1\0\5\14\1\71\12\14\13\0\1\14\21\72"+
    "\1\73\1\74\1\75\3\72\1\76\5\72\1\0\1\14"+
    "\1\15\1\16\1\17\1\14\1\20\1\21\1\14\1\22"+
    "\2\14\1\23\4\14\3\0\1\26\5\0\1\26\1\0"+
    "\1\14\30\0\1\77\4\0\23\100\1\101\7\100\1\102"+
    "\1\100\1\0\20\14\1\0\1\25\10\0\1\103\1\14"+
    "\1\0\20\33\13\0\1\33\1\0\3\33\1\104\14\33"+
    "\13\0\1\33\1\0\2\33\1\105\12\33\1\106\2\33"+
    "\13\0\1\33\1\0\2\33\1\106\4\33\1\106\10\33"+
    "\13\0\1\33\1\0\2\33\1\107\4\33\1\106\10\33"+
    "\13\0\1\33\1\0\11\33\1\110\6\33\13\0\1\33"+
    "\1\0\5\33\1\111\12\33\13\0\1\33\1\0\1\33"+
    "\1\0\1\34\1\35\1\33\1\36\1\37\1\33\1\40"+
    "\2\33\1\41\4\33\3\0\1\45\5\0\1\45\1\0"+
    "\1\33\30\0\1\112\34\0\1\113\4\0\21\47\1\114"+
    "\1\0\1\115\3\47\1\0\42\47\21\0\1\116\13\0"+
    "\33\54\1\0\1\54\24\0\1\57\5\0\1\57\32\0"+
    "\1\117\30\0\1\63\5\0\1\63\3\0\4\14\1\66"+
    "\13\14\13\0\1\14\1\0\16\14\1\120\1\14\13\0"+
    "\1\14\1\0\10\14\1\66\7\14\13\0\1\14\1\0"+
    "\12\14\1\121\5\14\13\0\1\14\1\0\4\14\1\122"+
    "\13\14\13\0\1\14\21\72\1\73\1\74\1\75\3\72"+
    "\1\0\42\72\22\0\1\74\4\0\1\76\31\0\1\77"+
    "\5\0\1\77\2\0\32\100\1\0\2\100\1\0\4\33"+
    "\1\106\13\33\13\0\1\33\1\0\16\33\1\123\1\33"+
    "\13\0\1\33\1\0\10\33\1\106\7\33\13\0\1\33"+
    "\1\0\12\33\1\124\5\33\13\0\1\33\1\0\4\33"+
    "\1\125\13\33\13\0\1\33\24\0\1\112\5\0\1\112"+
    "\26\0\1\113\5\0\1\113\26\0\1\117\5\0\1\117"+
    "\3\0\17\14\1\66\13\0\1\14\1\0\5\14\1\126"+
    "\12\14\13\0\1\14\1\0\14\14\1\66\3\14\13\0"+
    "\1\14\1\0\17\33\1\106\13\0\1\33\1\0\5\33"+
    "\1\127\12\33\13\0\1\33\1\0\14\33\1\106\3\33"+
    "\13\0\1\33\1\0\2\14\1\130\15\14\13\0\1\14"+
    "\1\0\2\33\1\131\15\33\13\0\1\33\1\0\11\14"+
    "\1\67\6\14\13\0\1\14\1\0\11\33\1\107\6\33"+
    "\13\0\1\33";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1972];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\11\0\1\11\10\1\1\11\2\1\1\11\13\1"+
    "\1\11\1\1\1\0\3\1\1\11\3\1\2\11\1\1"+
    "\1\11\1\1\1\11\7\1\2\0\1\11\2\0\1\1"+
    "\2\0\2\11\10\1\2\0\1\11\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[89];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

    private boolean insideRaw = false;

    public TwigLexer(int state){
        initialize(state);
    }
    public void reset(char array[], int offset, int length) {
        this.zzBuffer = array;
        this.zzCurrentPos = offset;
        this.zzMarkedPos = offset;
        this.zzPushbackPos = offset;
        this.yychar = offset;
        this.zzEndRead = offset + length;
        this.zzStartRead = offset;
        this.zzAtEOF = zzCurrentPos >= zzEndRead;
        this.firstPos = offset;
    }

    public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
        this.zzReader = reader;
        this.zzBuffer = buffer;
        this.zzMarkedPos = parameters[0];
        this.zzPushbackPos = parameters[1];
        this.zzCurrentPos = parameters[2];
        this.zzStartRead = parameters[3];
        this.zzEndRead = parameters[4];
        this.yyline = parameters[5];
        initialize(parameters[6]);
    }


    public int[] getParamenters(){
        return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline, zzLexicalState};
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected int getZZMarkedPos() {
        return zzMarkedPos;
    }

    protected int getZZEndRead() {
        return zzEndRead;
    }

    public char[] getZZBuffer() {
        return zzBuffer;
    }

    protected int getZZStartRead() {
        return this.zzStartRead;
    }

    protected int getZZPushBackPosition() {
        return this.zzPushbackPos;
    }

    protected boolean isZZAtBOL() {
        return zzAtBOL;
    }

    protected void pushBack(int i) {
        yypushback(i);
    }

    // A pool of states. To avoid creation of a new state on each createMemento.
    private static final IntHashtable lexerStates = new IntHashtable(100);

    protected IntHashtable getLexerStates() {
        return lexerStates;
    }

    private final void dump(String s) {
        if (Debug.debugTokenizer) {
            System.out.println("lexer: " + s + " (" + yychar + "-" + //$NON-NLS-2$//$NON-NLS-1$
                (yylength() + yychar) + "):\'" +//$NON-NLS-1$
                    StringUtils.escape(yytext()) + "\'");//$NON-NLS-1$
        }
    }



 // End user code


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TwigLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TwigLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }

  protected final int getYYcolumn() {
      return yycolumn;
  }

  public final boolean isInsideRaw() {
      return insideRaw;
  }

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public String yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 27:
          { if(Debug.debugTokenizer)
        dump("TWIG COMMENT CLOSE");


    return TWIG_COMMENT_CLOSE;
          }
        case 28: break;
        case 14:
          { if(Debug.debugTokenizer)
        dump("TWIG SINGLE QUOTES END");

    popState();
    return TWIG_SINGLE_QUOTES_END;
          }
        case 29: break;
        case 18:
          { if(Debug.debugTokenizer)
        dump("TWIG JSON END");

    //yybegin(ST_TWIG_HASH)
    popState();
    return TWIG_HASH_END;
          }
        case 30: break;
        case 10:
          { if(Debug.debugTokenizer)
        dump("TWIG MINUS");


    return TWIG_MINUS;
          }
        case 31: break;
        case 12:
          { if(Debug.debugTokenizer)
        dump("TWIG DOUBLE QUOTES END");

    popState();
    return TWIG_DOUBLE_QUOTES_END;
          }
        case 32: break;
        case 25:
          { if(Debug.debugTokenizer)
        dump("TWIG_STMT_CLOSE");

    popState();
    return TWIG_STMT_CLOSE;
          }
        case 33: break;
        case 23:
          { if(Debug.debugTokenizer)
        dump("TWIG_CONSTANT_ENCAPSED_STRING SINGLE");

    return TWIG_CONSTANT_ENCAPSED_STRING;
          }
        case 34: break;
        case 4:
          { if(Debug.debugTokenizer)
        dump("TWIG JSON START");

    pushState(ST_TWIG_HASH);
    return TWIG_HASH_START;
          }
        case 35: break;
        case 16:
          { popState();return TWIG_WHITESPACE;
          }
        case 36: break;
        case 1:
          { if(Debug.debugTokenizer)
        dump("TWIG HIGHLIGHT ERROR");

    reportError();
    yypushback(1);
    pushState(ST_TWIG_HIGHLIGHTING_ERROR);
          }
        case 37: break;
        case 26:
          { if(Debug.debugTokenizer)
        dump("TWIG INTERPOLATION START");

    pushState(ST_TWIG_INTERPOLATION);
    return TWIG_INTERPOLATION_START;
          }
        case 38: break;
        case 20:
          { if(Debug.debugTokenizer)
        dump("TWIG KEYWORD");

    return TWIG_KEYWORD;
          }
        case 39: break;
        case 6:
          { if(Debug.debugTokenizer)
        dump("TWIG WHITESPACE");

    return TWIG_WHITESPACE;
          }
        case 40: break;
        case 2:
          { if(Debug.debugTokenizer)
        dump("TWIG LABEL");

    return TWIG_LABEL;
          }
        case 41: break;
        case 5:
          { if(Debug.debugTokenizer)
        dump("TWIG DOUBLE QUOTES START");

    pushState(ST_TWIG_DOUBLE_QUOTES);
    return TWIG_DOUBLE_QUOTES_START;
          }
        case 42: break;
        case 24:
          { if(Debug.debugTokenizer)
        dump("TWIG_STMT_CLOSE");

    return TWIG_STMT_CLOSE;
          }
        case 43: break;
        case 17:
          { // see github #41
//<ST_TWIG_COMMENT> [^#]+ {

    if(Debug.debugTokenizer)
        dump("TWIG COMMENT");

    return TWIG_COMMENT;
          }
        case 44: break;
        case 11:
          { if(Debug.debugTokenizer)
        dump("TWIG DOUBLE QUOTES CONTENT");

    return TWIG_DOUBLE_QUOTES_CONTENT;
          }
        case 45: break;
        case 7:
          { if(Debug.debugTokenizer)
        dump("TWIG DELIMITER TOKEN");
    return TWIG_DELIMITER;
          }
        case 46: break;
        case 22:
          { if(Debug.debugTokenizer)
        dump("TWIG_CLOSETAG");

    return TWIG_CLOSETAG;
          }
        case 47: break;
        case 3:
          { if(Debug.debugTokenizer)
        dump("TWIG NUMBER");

    return TWIG_NUMBER;
          }
        case 48: break;
        case 13:
          { if(Debug.debugTokenizer)
        dump("TWIG SINGLE QUOTES CONTENT");

    return TWIG_SINGLE_QUOTES_CONTENT;
          }
        case 49: break;
        case 9:
          { if(Debug.debugTokenizer)
        dump("TWIG BLOCKNAME");

    if (tokenizer != null) {
        if ("raw".equals(yytext())) {
            insideRaw = true;
            tokenizer.startRaw();
        } else if ("endraw".equals(yytext())) {
            insideRaw = true;
            tokenizer.endRaw();
        }
    }

    pushState(ST_TWIG_IN_STATEMENT_BODY);
    return TWIG_BLOCKNAME;
          }
        case 50: break;
        case 21:
          { if(Debug.debugTokenizer)
        dump("TWIG_CONSTANT_ENCAPSED_STRING DOUBLE");

    return TWIG_CONSTANT_ENCAPSED_STRING;
          }
        case 51: break;
        case 15:
          { return UNKNOWN_TOKEN;
          }
        case 52: break;
        case 19:
          { if(Debug.debugTokenizer)
        dump("TWIG INTERPOLATION END");

    popState();
    return TWIG_INTERPOLATION_END;
          }
        case 53: break;
        case 8:
          { if(Debug.debugTokenizer)
        dump("TWIG SINGLE QUOTES START");

    pushState(ST_TWIG_SINGLE_QUOTES);
    return TWIG_SINGLE_QUOTES_START;
          }
        case 54: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
